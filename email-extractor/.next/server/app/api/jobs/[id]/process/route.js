"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/jobs/[id]/process/route";
exports.ids = ["app/api/jobs/[id]/process/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&page=%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&page=%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_sankalp_fs5_email_extractor_app_api_jobs_id_process_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/jobs/[id]/process/route.ts */ \"(rsc)/./app/api/jobs/[id]/process/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/jobs/[id]/process/route\",\n        pathname: \"/api/jobs/[id]/process\",\n        filename: \"route\",\n        bundlePath: \"app/api/jobs/[id]/process/route\"\n    },\n    resolvedPagePath: \"/Users/sankalp/fs5/email-extractor/app/api/jobs/[id]/process/route.ts\",\n    nextConfigOutput,\n    userland: _Users_sankalp_fs5_email_extractor_app_api_jobs_id_process_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/jobs/[id]/process/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZqb2JzJTJGJTVCaWQlNUQlMkZwcm9jZXNzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZqb2JzJTJGJTVCaWQlNUQlMkZwcm9jZXNzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGam9icyUyRiU1QmlkJTVEJTJGcHJvY2VzcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnNhbmthbHAlMkZmczUlMkZlbWFpbC1leHRyYWN0b3IlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGc2Fua2FscCUyRmZzNSUyRmVtYWlsLWV4dHJhY3RvciZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNxQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtYWlsLWV4dHJhY3Rvci8/NzdmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc2Fua2FscC9mczUvZW1haWwtZXh0cmFjdG9yL2FwcC9hcGkvam9icy9baWRdL3Byb2Nlc3Mvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvam9icy9baWRdL3Byb2Nlc3NcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3NhbmthbHAvZnM1L2VtYWlsLWV4dHJhY3Rvci9hcHAvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&page=%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/jobs/[id]/process/route.ts":
/*!********************************************!*\
  !*** ./app/api/jobs/[id]/process/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _route__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../route */ \"(rsc)/./app/api/jobs/route.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_emailExtractor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/emailExtractor */ \"(rsc)/./lib/emailExtractor.ts\");\n\n\n\n\n\n// Storage file path\nconst storageFile = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \"data\", \"jobs.json\");\n// Helper function to save jobs to storage\nfunction saveJobs() {\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(storageFile, JSON.stringify(_route__WEBPACK_IMPORTED_MODULE_1__.jobs, null, 2));\n    } catch (error) {\n        console.error(\"Error saving jobs to storage:\", error);\n    }\n}\nasync function POST(request, { params }) {\n    try {\n        // Check if the jobs array is empty (server restarted)\n        if (_route__WEBPACK_IMPORTED_MODULE_1__.jobs.length === 0) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Cannot process job. Server has been restarted. Please create a new job.\"\n            }, {\n                status: 400\n            });\n        }\n        const jobIndex = _route__WEBPACK_IMPORTED_MODULE_1__.jobs.findIndex((job)=>job.id === params.id);\n        if (jobIndex === -1) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Job not found\"\n            }, {\n                status: 404\n            });\n        }\n        const job = _route__WEBPACK_IMPORTED_MODULE_1__.jobs[jobIndex];\n        // Only process pending jobs\n        if (job.status !== \"pending\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Job is already processing or completed\"\n            }, {\n                status: 400\n            });\n        }\n        // Update job status\n        job.status = \"processing\";\n        job.progress = 0;\n        job.emails = [];\n        job.startTime = Date.now();\n        job.estimatedCompletionTime = calculateEstimatedCompletionTime(job.totalUrls);\n        // Save job status change to file\n        saveJobs();\n        // Start processing in the background\n        processJob(job);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            message: \"Job processing started\"\n        });\n    } catch (error) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: error.message || \"Failed to process job\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Calculate estimated completion time based on number of URLs\nfunction calculateEstimatedCompletionTime(totalUrls) {\n    // We add 1 second per URL + a small buffer (avg processing time)\n    const processingTimePerUrl = 1000; // 1 second per URL\n    const buffer = 5000; // 5 second buffer\n    return Date.now() + totalUrls * processingTimePerUrl + buffer;\n}\n// Update estimated completion time based on current progress\nfunction updateEstimatedCompletionTime(job, processedUrls) {\n    // Use current time if startTime is undefined\n    const startTime = job.startTime || Date.now();\n    const elapsedTime = Date.now() - startTime;\n    const remainingUrls = job.totalUrls - processedUrls;\n    if (processedUrls > 0 && remainingUrls > 0) {\n        // Calculate average time per URL based on current performance\n        const avgTimePerUrl = elapsedTime / processedUrls;\n        // Estimate remaining time\n        const remainingTime = avgTimePerUrl * remainingUrls;\n        // Update estimated completion time\n        job.estimatedCompletionTime = Date.now() + remainingTime;\n    }\n}\nasync function processJob(job) {\n    const emails = new Set();\n    for(let i = 0; i < job.urls.length; i++){\n        try {\n            const url = job.urls[i];\n            // Use the improved email extractor\n            const extractedEmails = await (0,_lib_emailExtractor__WEBPACK_IMPORTED_MODULE_4__.extractEmails)(url);\n            // Add unique emails to the set\n            extractedEmails.forEach((email)=>emails.add(email));\n            // Update job progress\n            job.processedUrls = i + 1;\n            job.progress = Math.round(job.processedUrls / job.totalUrls * 100);\n            job.emailsFound = emails.size;\n            job.emails = Array.from(emails);\n            // Update estimated completion time\n            updateEstimatedCompletionTime(job, job.processedUrls);\n            // Save job updates to file periodically (every 5 URLs)\n            if (i % 5 === 0 || i === job.urls.length - 1) {\n                saveJobs();\n            }\n            // Add a small delay to avoid rate limiting\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        } catch (error) {\n            console.error(`Error processing URL ${job.urls[i]}:`, error);\n        // Continue with next URL\n        }\n    }\n    // Mark job as completed\n    job.status = \"completed\";\n    job.progress = 100;\n    job.estimatedCompletionTime = Date.now(); // Set to current time since it's complete\n    // Save final job state to file\n    saveJobs();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ0g7QUFDcEI7QUFDSTtBQUM2QjtBQUVyRCxvQkFBb0I7QUFDcEIsTUFBTUssY0FBY0YsZ0RBQVMsQ0FBQ0ksUUFBUUMsR0FBRyxJQUFJLFFBQVE7QUFFckQsMENBQTBDO0FBQzFDLFNBQVNDO0lBQ1AsSUFBSTtRQUNGUCx1REFBZ0IsQ0FBQ0csYUFBYU0sS0FBS0MsU0FBUyxDQUFDWCx3Q0FBSUEsRUFBRSxNQUFNO0lBQzNELEVBQUUsT0FBT1ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtJQUNqRDtBQUNGO0FBRU8sZUFBZUUsS0FDcEJDLE9BQWdCLEVBQ2hCLEVBQUVDLE1BQU0sRUFBOEI7SUFFdEMsSUFBSTtRQUNGLHNEQUFzRDtRQUN0RCxJQUFJaEIsd0NBQUlBLENBQUNpQixNQUFNLEtBQUssR0FBRztZQUNyQixPQUFPbEIsa0ZBQVlBLENBQUNtQixJQUFJLENBQ3RCO2dCQUFFTixPQUFPO1lBQTBFLEdBQ25GO2dCQUFFTyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxNQUFNQyxXQUFXcEIsd0NBQUlBLENBQUNxQixTQUFTLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsRUFBRSxLQUFLUCxPQUFPTyxFQUFFO1FBRTdELElBQUlILGFBQWEsQ0FBQyxHQUFHO1lBQ25CLE9BQU9yQixrRkFBWUEsQ0FBQ21CLElBQUksQ0FDdEI7Z0JBQUVOLE9BQU87WUFBZ0IsR0FDekI7Z0JBQUVPLFFBQVE7WUFBSTtRQUVsQjtRQUVBLE1BQU1HLE1BQU10Qix3Q0FBSSxDQUFDb0IsU0FBUztRQUUxQiw0QkFBNEI7UUFDNUIsSUFBSUUsSUFBSUgsTUFBTSxLQUFLLFdBQVc7WUFDNUIsT0FBT3BCLGtGQUFZQSxDQUFDbUIsSUFBSSxDQUN0QjtnQkFBRU4sT0FBTztZQUF5QyxHQUNsRDtnQkFBRU8sUUFBUTtZQUFJO1FBRWxCO1FBRUEs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QUlPLHVCQUF1QixHQUFHRixLQUFLQyxHQUFHLElBQUksMENBQTBDO0lBRXBGLCtCQUErQjtJQUMvQnBCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbWFpbC1leHRyYWN0b3IvLi9hcHAvYXBpL2pvYnMvW2lkXS9wcm9jZXNzL3JvdXRlLnRzP2Q5NjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgam9icywgSm9iIH0gZnJvbSAnLi4vLi4vcm91dGUnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZXh0cmFjdEVtYWlscyB9IGZyb20gJ0AvbGliL2VtYWlsRXh0cmFjdG9yJztcblxuLy8gU3RvcmFnZSBmaWxlIHBhdGhcbmNvbnN0IHN0b3JhZ2VGaWxlID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdkYXRhJywgJ2pvYnMuanNvbicpO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2F2ZSBqb2JzIHRvIHN0b3JhZ2VcbmZ1bmN0aW9uIHNhdmVKb2JzKCkge1xuICB0cnkge1xuICAgIGZzLndyaXRlRmlsZVN5bmMoc3RvcmFnZUZpbGUsIEpTT04uc3RyaW5naWZ5KGpvYnMsIG51bGwsIDIpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgam9icyB0byBzdG9yYWdlOicsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IHsgaWQ6IHN0cmluZyB9IH1cbikge1xuICB0cnkge1xuICAgIC8vIENoZWNrIGlmIHRoZSBqb2JzIGFycmF5IGlzIGVtcHR5IChzZXJ2ZXIgcmVzdGFydGVkKVxuICAgIGlmIChqb2JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnQ2Fubm90IHByb2Nlc3Mgam9iLiBTZXJ2ZXIgaGFzIGJlZW4gcmVzdGFydGVkLiBQbGVhc2UgY3JlYXRlIGEgbmV3IGpvYi4nIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBqb2JJbmRleCA9IGpvYnMuZmluZEluZGV4KChqb2IpID0+IGpvYi5pZCA9PT0gcGFyYW1zLmlkKTtcbiAgICBcbiAgICBpZiAoam9iSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdKb2Igbm90IGZvdW5kJyB9LFxuICAgICAgICB7IHN0YXR1czogNDA0IH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgam9iID0gam9ic1tqb2JJbmRleF07XG4gICAgXG4gICAgLy8gT25seSBwcm9jZXNzIHBlbmRpbmcgam9ic1xuICAgIGlmIChqb2Iuc3RhdHVzICE9PSAncGVuZGluZycpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0pvYiBpcyBhbHJlYWR5IHByb2Nlc3Npbmcgb3IgY29tcGxldGVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIGpvYiBzdGF0dXNcbiAgICBqb2Iuc3RhdHVzID0gJ3Byb2Nlc3NpbmcnO1xuICAgIGpvYi5wcm9ncmVzcyA9IDA7XG4gICAgam9iLmVtYWlscyA9IFtdO1xuICAgIGpvYi5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGpvYi5lc3RpbWF0ZWRDb21wbGV0aW9uVGltZSA9IGNhbGN1bGF0ZUVzdGltYXRlZENvbXBsZXRpb25UaW1lKGpvYi50b3RhbFVybHMpO1xuICAgIFxuICAgIC8vIFNhdmUgam9iIHN0YXR1cyBjaGFuZ2UgdG8gZmlsZVxuICAgIHNhdmVKb2JzKCk7XG5cbiAgICAvLyBTdGFydCBwcm9jZXNzaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgcHJvY2Vzc0pvYihqb2IpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgbWVzc2FnZTogJ0pvYiBwcm9jZXNzaW5nIHN0YXJ0ZWQnIH0pO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHByb2Nlc3Mgam9iJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG4vLyBDYWxjdWxhdGUgZXN0aW1hdGVkIGNvbXBsZXRpb24gdGltZSBiYXNlZCBvbiBudW1iZXIgb2YgVVJMc1xuZnVuY3Rpb24gY2FsY3VsYXRlRXN0aW1hdGVkQ29tcGxldGlvblRpbWUodG90YWxVcmxzOiBudW1iZXIpOiBudW1iZXIge1xuICAvLyBXZSBhZGQgMSBzZWNvbmQgcGVyIFVSTCArIGEgc21hbGwgYnVmZmVyIChhdmcgcHJvY2Vzc2luZyB0aW1lKVxuICBjb25zdCBwcm9jZXNzaW5nVGltZVBlclVybCA9IDEwMDA7IC8vIDEgc2Vjb25kIHBlciBVUkxcbiAgY29uc3QgYnVmZmVyID0gNTAwMDsgLy8gNSBzZWNvbmQgYnVmZmVyXG4gIHJldHVybiBEYXRlLm5vdygpICsgKHRvdGFsVXJscyAqIHByb2Nlc3NpbmdUaW1lUGVyVXJsKSArIGJ1ZmZlcjtcbn1cblxuLy8gVXBkYXRlIGVzdGltYXRlZCBjb21wbGV0aW9uIHRpbWUgYmFzZWQgb24gY3VycmVudCBwcm9ncmVzc1xuZnVuY3Rpb24gdXBkYXRlRXN0aW1hdGVkQ29tcGxldGlvblRpbWUoam9iOiBKb2IsIHByb2Nlc3NlZFVybHM6IG51bWJlcik6IHZvaWQge1xuICAvLyBVc2UgY3VycmVudCB0aW1lIGlmIHN0YXJ0VGltZSBpcyB1bmRlZmluZWRcbiAgY29uc3Qgc3RhcnRUaW1lID0gam9iLnN0YXJ0VGltZSB8fCBEYXRlLm5vdygpO1xuICBjb25zdCBlbGFwc2VkVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gIGNvbnN0IHJlbWFpbmluZ1VybHMgPSBqb2IudG90YWxVcmxzIC0gcHJvY2Vzc2VkVXJscztcbiAgXG4gIGlmIChwcm9jZXNzZWRVcmxzID4gMCAmJiByZW1haW5pbmdVcmxzID4gMCkge1xuICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlIHRpbWUgcGVyIFVSTCBiYXNlZCBvbiBjdXJyZW50IHBlcmZvcm1hbmNlXG4gICAgY29uc3QgYXZnVGltZVBlclVybCA9IGVsYXBzZWRUaW1lIC8gcHJvY2Vzc2VkVXJscztcbiAgICAvLyBFc3RpbWF0ZSByZW1haW5pbmcgdGltZVxuICAgIGNvbnN0IHJlbWFpbmluZ1RpbWUgPSBhdmdUaW1lUGVyVXJsICogcmVtYWluaW5nVXJscztcbiAgICAvLyBVcGRhdGUgZXN0aW1hdGVkIGNvbXBsZXRpb24gdGltZVxuICAgIGpvYi5lc3RpbWF0ZWRDb21wbGV0aW9uVGltZSA9IERhdGUubm93KCkgKyByZW1haW5pbmdUaW1lO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NKb2Ioam9iOiBKb2IpIHtcbiAgY29uc3QgZW1haWxzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGpvYi51cmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IGpvYi51cmxzW2ldO1xuICAgICAgLy8gVXNlIHRoZSBpbXByb3ZlZCBlbWFpbCBleHRyYWN0b3JcbiAgICAgIGNvbnN0IGV4dHJhY3RlZEVtYWlscyA9IGF3YWl0IGV4dHJhY3RFbWFpbHModXJsKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHVuaXF1ZSBlbWFpbHMgdG8gdGhlIHNldFxuICAgICAgZXh0cmFjdGVkRW1haWxzLmZvckVhY2goZW1haWwgPT4gZW1haWxzLmFkZChlbWFpbCkpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgam9iIHByb2dyZXNzXG4gICAgICBqb2IucHJvY2Vzc2VkVXJscyA9IGkgKyAxO1xuICAgICAgam9iLnByb2dyZXNzID0gTWF0aC5yb3VuZCgoam9iLnByb2Nlc3NlZFVybHMgLyBqb2IudG90YWxVcmxzKSAqIDEwMCk7XG4gICAgICBqb2IuZW1haWxzRm91bmQgPSBlbWFpbHMuc2l6ZTtcbiAgICAgIGpvYi5lbWFpbHMgPSBBcnJheS5mcm9tKGVtYWlscyk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBlc3RpbWF0ZWQgY29tcGxldGlvbiB0aW1lXG4gICAgICB1cGRhdGVFc3RpbWF0ZWRDb21wbGV0aW9uVGltZShqb2IsIGpvYi5wcm9jZXNzZWRVcmxzKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBqb2IgdXBkYXRlcyB0byBmaWxlIHBlcmlvZGljYWxseSAoZXZlcnkgNSBVUkxzKVxuICAgICAgaWYgKGkgJSA1ID09PSAwIHx8IGkgPT09IGpvYi51cmxzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgc2F2ZUpvYnMoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQWRkIGEgc21hbGwgZGVsYXkgdG8gYXZvaWQgcmF0ZSBsaW1pdGluZ1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBVUkwgJHtqb2IudXJsc1tpXX06YCwgZXJyb3IpO1xuICAgICAgLy8gQ29udGludWUgd2l0aCBuZXh0IFVSTFxuICAgIH1cbiAgfVxuICBcbiAgLy8gTWFyayBqb2IgYXMgY29tcGxldGVkXG4gIGpvYi5zdGF0dXMgPSAnY29tcGxldGVkJztcbiAgam9iLnByb2dyZXNzID0gMTAwO1xuICBqb2IuZXN0aW1hdGVkQ29tcGxldGlvblRpbWUgPSBEYXRlLm5vdygpOyAvLyBTZXQgdG8gY3VycmVudCB0aW1lIHNpbmNlIGl0J3MgY29tcGxldGVcbiAgXG4gIC8vIFNhdmUgZmluYWwgam9iIHN0YXRlIHRvIGZpbGVcbiAgc2F2ZUpvYnMoKTtcbn0gIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImpvYnMiLCJmcyIsInBhdGgiLCJleHRyYWN0RW1haWxzIiwic3RvcmFnZUZpbGUiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsInNhdmVKb2JzIiwid3JpdGVGaWxlU3luYyIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsImNvbnNvbGUiLCJQT1NUIiwicmVxdWVzdCIsInBhcmFtcyIsImxlbmd0aCIsImpzb24iLCJzdGF0dXMiLCJqb2JJbmRleCIsImZpbmRJbmRleCIsImpvYiIsImlkIiwicHJvZ3Jlc3MiLCJlbWFpbHMiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiZXN0aW1hdGVkQ29tcGxldGlvblRpbWUiLCJjYWxjdWxhdGVFc3RpbWF0ZWRDb21wbGV0aW9uVGltZSIsInRvdGFsVXJscyIsInByb2Nlc3NKb2IiLCJtZXNzYWdlIiwicHJvY2Vzc2luZ1RpbWVQZXJVcmwiLCJidWZmZXIiLCJ1cGRhdGVFc3RpbWF0ZWRDb21wbGV0aW9uVGltZSIsInByb2Nlc3NlZFVybHMiLCJlbGFwc2VkVGltZSIsInJlbWFpbmluZ1VybHMiLCJhdmdUaW1lUGVyVXJsIiwicmVtYWluaW5nVGltZSIsIlNldCIsImkiLCJ1cmxzIiwidXJsIiwiZXh0cmFjdGVkRW1haWxzIiwiZm9yRWFjaCIsImVtYWlsIiwiYWRkIiwiTWF0aCIsInJvdW5kIiwiZW1haWxzRm91bmQiLCJzaXplIiwiQXJyYXkiLCJmcm9tIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/jobs/[id]/process/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/jobs/route.ts":
/*!*******************************!*\
  !*** ./app/api/jobs/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   jobs: () => (/* binding */ jobs)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n// Extract spreadsheet ID from URL\nfunction getSpreadsheetId(url) {\n    try {\n        const matches = url.match(/\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/);\n        if (!matches) throw new Error(\"Invalid Google Sheet URL\");\n        return matches[1];\n    } catch (error) {\n        throw new Error(\"Invalid Google Sheet URL\");\n    }\n}\n// Storage file path\nconst storageDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"data\");\nconst storageFile = path__WEBPACK_IMPORTED_MODULE_2___default().join(storageDir, \"jobs.json\");\n// Ensure storage directory exists\nif (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(storageDir)) {\n    fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(storageDir, {\n        recursive: true\n    });\n}\n// Load jobs from storage or initialize empty array\nlet loadedJobs = [];\ntry {\n    if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(storageFile)) {\n        const data = fs__WEBPACK_IMPORTED_MODULE_1___default().readFileSync(storageFile, \"utf8\");\n        loadedJobs = JSON.parse(data);\n        console.log(`Loaded ${loadedJobs.length} jobs from storage`);\n    }\n} catch (error) {\n    console.error(\"Error loading jobs from storage:\", error);\n}\n// In-memory storage for jobs (initialized from file if available)\nconst jobs = loadedJobs;\n// Helper function to save jobs to storage\nfunction saveJobs() {\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_1___default().writeFileSync(storageFile, JSON.stringify(jobs, null, 2));\n    } catch (error) {\n        console.error(\"Error saving jobs to storage:\", error);\n    }\n}\nasync function GET() {\n    try {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(jobs);\n    } catch (error) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: error.message || \"Failed to fetch jobs\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const { name, sheetUrl, column } = await request.json();\n        if (!name || !sheetUrl || !column) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Name, sheet URL and column are required\"\n            }, {\n                status: 400\n            });\n        }\n        const spreadsheetId = getSpreadsheetId(sheetUrl);\n        const csvUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=csv`;\n        // Fetch the sheet data\n        const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(csvUrl);\n        const rows = response.data.split(\"\\n\");\n        const headers = rows[0].split(\",\").map((col)=>col.trim().replace(/^\"|\"$/g, \"\"));\n        const columnIndex = headers.indexOf(column);\n        if (columnIndex === -1) {\n            throw new Error(\"Column not found\");\n        }\n        // Extract URLs\n        const urls = rows.slice(1).map((row)=>{\n            const cells = row.split(\",\");\n            const cell = cells[columnIndex]?.toLowerCase() || \"\";\n            return cell.includes(\"http\") || cell.includes(\"www.\") ? cells[columnIndex] : null;\n        }).filter(Boolean);\n        // Create job\n        const job = {\n            id: Date.now().toString(),\n            name,\n            sheetUrl,\n            column,\n            urls,\n            totalUrls: urls.length,\n            processedUrls: 0,\n            emailsFound: 0,\n            status: \"pending\",\n            progress: 0,\n            createdAt: new Date().toISOString()\n        };\n        // Store job in memory\n        jobs.push(job);\n        // Save jobs to file\n        saveJobs();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(job);\n    } catch (error) {\n        console.error(\"Error creating job:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: error.message || \"Failed to create job\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SyxDQUFDLEdBQ3JCUCxHQUFHLENBQUMsQ0FBQ1E7WUFDSixNQUFNQyxRQUFRRCxJQUFJVixLQUFLLENBQUM7WUFDeEIsTUFBTVksT0FBT0QsS0FBSyxDQUFDTCxZQUFZLEVBQUVPLGlCQUFpQjtZQUNsRCxPQUFPRCxLQUFLRSxRQUFRLENBQUMsV0FBV0YsS0FBS0UsUUFBUSxDQUFDLFVBQVVILEtBQUssQ0FBQ0wsWUFBWSxHQUFHO1FBQy9FLEdBQ0NTLE1BQU0sQ0FBQ0M7UUFFVixhQUFhO1FBQ2IsTUFBTUMsTUFBVztZQUNmQyxJQUFJQyxLQUFLQyxHQUFHLEdBQUdDLFFBQVE7WUFDdkI3QjtZQUNBQztZQUNBQztZQUNBYztZQUNBYyxXQUFXZCxLQUFLM0IsTUFBTTtZQUN0QjBDLGVBQWU7WUFDZkMsYUFBYTtZQUNibkMsUUFBUTtZQUNSb0MsVUFBVTtZQUNWQyxXQUFXLElBQUlQLE9BQU9RLFdBQVc7UUFDbkM7UUFFQSxzQkFBc0I7UUFDdEI3QyxLQUFLOEMsSUFBSSxDQUFDWDtRQUVWLG9CQUFvQjtRQUNwQmxDO1FBRUEsT0FBTzNCLGtGQUFZQSxDQUFDK0IsSUFBSSxDQUFDOEI7SUFDM0IsRUFBRSxPQUFPcEQsT0FBWTtRQUNuQmMsUUFBUWQsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBT1Qsa0ZBQVlBLENBQUMrQixJQUFJLENBQ3RCO1lBQUV0QixPQUFPQSxNQUFNdUIsT0FBTyxJQUFJO1FBQXVCLEdBQ2pEO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1haWwtZXh0cmFjdG9yLy4vYXBwL2FwaS9qb2JzL3JvdXRlLnRzPzllNzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gRXh0cmFjdCBzcHJlYWRzaGVldCBJRCBmcm9tIFVSTFxuZnVuY3Rpb24gZ2V0U3ByZWFkc2hlZXRJZCh1cmw6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSB1cmwubWF0Y2goL1xcL3NwcmVhZHNoZWV0c1xcL2RcXC8oW2EtekEtWjAtOS1fXSspLyk7XG4gICAgaWYgKCFtYXRjaGVzKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgR29vZ2xlIFNoZWV0IFVSTCcpO1xuICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBHb29nbGUgU2hlZXQgVVJMJyk7XG4gIH1cbn1cblxuLy8gRGVmaW5lIHRoZSBKb2IgaW50ZXJmYWNlIGZvciB0eXBlIHNhZmV0eVxuZXhwb3J0IGludGVyZmFjZSBKb2Ige1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHNoZWV0VXJsOiBzdHJpbmc7XG4gIGNvbHVtbjogc3RyaW5nO1xuICB1cmxzOiBzdHJpbmdbXTtcbiAgdG90YWxVcmxzOiBudW1iZXI7XG4gIHByb2Nlc3NlZFVybHM6IG51bWJlcjtcbiAgZW1haWxzRm91bmQ6IG51bWJlcjtcbiAgc3RhdHVzOiBzdHJpbmc7XG4gIHByb2dyZXNzOiBudW1iZXI7XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xuICBlbWFpbHM/OiBzdHJpbmdbXTtcbiAgc3RhcnRUaW1lPzogbnVtYmVyO1xuICBlc3RpbWF0ZWRDb21wbGV0aW9uVGltZT86IG51bWJlcjtcbn1cblxuLy8gU3RvcmFnZSBmaWxlIHBhdGhcbmNvbnN0IHN0b3JhZ2VEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnKTtcbmNvbnN0IHN0b3JhZ2VGaWxlID0gcGF0aC5qb2luKHN0b3JhZ2VEaXIsICdqb2JzLmpzb24nKTtcblxuLy8gRW5zdXJlIHN0b3JhZ2UgZGlyZWN0b3J5IGV4aXN0c1xuaWYgKCFmcy5leGlzdHNTeW5jKHN0b3JhZ2VEaXIpKSB7XG4gIGZzLm1rZGlyU3luYyhzdG9yYWdlRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbn1cblxuLy8gTG9hZCBqb2JzIGZyb20gc3RvcmFnZSBvciBpbml0aWFsaXplIGVtcHR5IGFycmF5XG5sZXQgbG9hZGVkSm9iczogSm9iW10gPSBbXTtcbnRyeSB7XG4gIGlmIChmcy5leGlzdHNTeW5jKHN0b3JhZ2VGaWxlKSkge1xuICAgIGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoc3RvcmFnZUZpbGUsICd1dGY4Jyk7XG4gICAgbG9hZGVkSm9icyA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgY29uc29sZS5sb2coYExvYWRlZCAke2xvYWRlZEpvYnMubGVuZ3RofSBqb2JzIGZyb20gc3RvcmFnZWApO1xuICB9XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGpvYnMgZnJvbSBzdG9yYWdlOicsIGVycm9yKTtcbn1cblxuLy8gSW4tbWVtb3J5IHN0b3JhZ2UgZm9yIGpvYnMgKGluaXRpYWxpemVkIGZyb20gZmlsZSBpZiBhdmFpbGFibGUpXG5leHBvcnQgY29uc3Qgam9iczogSm9iW10gPSBsb2FkZWRKb2JzO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2F2ZSBqb2JzIHRvIHN0b3JhZ2VcbmZ1bmN0aW9uIHNhdmVKb2JzKCkge1xuICB0cnkge1xuICAgIGZzLndyaXRlRmlsZVN5bmMoc3RvcmFnZUZpbGUsIEpTT04uc3RyaW5naWZ5KGpvYnMsIG51bGwsIDIpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgam9icyB0byBzdG9yYWdlOicsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICB0cnkge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihqb2JzKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBmZXRjaCBqb2JzJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBuYW1lLCBzaGVldFVybCwgY29sdW1uIH0gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBcbiAgICBpZiAoIW5hbWUgfHwgIXNoZWV0VXJsIHx8ICFjb2x1bW4pIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ05hbWUsIHNoZWV0IFVSTCBhbmQgY29sdW1uIGFyZSByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHNwcmVhZHNoZWV0SWQgPSBnZXRTcHJlYWRzaGVldElkKHNoZWV0VXJsKTtcbiAgICBjb25zdCBjc3ZVcmwgPSBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvJHtzcHJlYWRzaGVldElkfS9leHBvcnQ/Zm9ybWF0PWNzdmA7XG4gICAgXG4gICAgLy8gRmV0Y2ggdGhlIHNoZWV0IGRhdGFcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChjc3ZVcmwpO1xuICAgIGNvbnN0IHJvd3MgPSByZXNwb25zZS5kYXRhLnNwbGl0KCdcXG4nKTtcbiAgICBjb25zdCBoZWFkZXJzID0gcm93c1swXS5zcGxpdCgnLCcpLm1hcCgoY29sOiBzdHJpbmcpID0+IGNvbC50cmltKCkucmVwbGFjZSgvXlwifFwiJC9nLCAnJykpO1xuICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gaGVhZGVycy5pbmRleE9mKGNvbHVtbik7XG4gICAgXG4gICAgaWYgKGNvbHVtbkluZGV4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2x1bW4gbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCBVUkxzXG4gICAgY29uc3QgdXJscyA9IHJvd3Muc2xpY2UoMSlcbiAgICAgIC5tYXAoKHJvdzogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gcm93LnNwbGl0KCcsJyk7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tjb2x1bW5JbmRleF0/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XG4gICAgICAgIHJldHVybiBjZWxsLmluY2x1ZGVzKCdodHRwJykgfHwgY2VsbC5pbmNsdWRlcygnd3d3LicpID8gY2VsbHNbY29sdW1uSW5kZXhdIDogbnVsbDtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgLy8gQ3JlYXRlIGpvYlxuICAgIGNvbnN0IGpvYjogSm9iID0ge1xuICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgIG5hbWUsXG4gICAgICBzaGVldFVybCxcbiAgICAgIGNvbHVtbixcbiAgICAgIHVybHMsXG4gICAgICB0b3RhbFVybHM6IHVybHMubGVuZ3RoLFxuICAgICAgcHJvY2Vzc2VkVXJsczogMCxcbiAgICAgIGVtYWlsc0ZvdW5kOiAwLFxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcblxuICAgIC8vIFN0b3JlIGpvYiBpbiBtZW1vcnlcbiAgICBqb2JzLnB1c2goam9iKTtcbiAgICBcbiAgICAvLyBTYXZlIGpvYnMgdG8gZmlsZVxuICAgIHNhdmVKb2JzKCk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oam9iKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGpvYjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGNyZWF0ZSBqb2InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJheGlvcyIsImZzIiwicGF0aCIsImdldFNwcmVhZHNoZWV0SWQiLCJ1cmwiLCJtYXRjaGVzIiwibWF0Y2giLCJFcnJvciIsImVycm9yIiwic3RvcmFnZURpciIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwic3RvcmFnZUZpbGUiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwibG9hZGVkSm9icyIsImRhdGEiLCJyZWFkRmlsZVN5bmMiLCJKU09OIiwicGFyc2UiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiam9icyIsInNhdmVKb2JzIiwid3JpdGVGaWxlU3luYyIsInN0cmluZ2lmeSIsIkdFVCIsImpzb24iLCJtZXNzYWdlIiwic3RhdHVzIiwiUE9TVCIsInJlcXVlc3QiLCJuYW1lIiwic2hlZXRVcmwiLCJjb2x1bW4iLCJzcHJlYWRzaGVldElkIiwiY3N2VXJsIiwicmVzcG9uc2UiLCJnZXQiLCJyb3dzIiwic3BsaXQiLCJoZWFkZXJzIiwibWFwIiwiY29sIiwidHJpbSIsInJlcGxhY2UiLCJjb2x1bW5JbmRleCIsImluZGV4T2YiLCJ1cmxzIiwic2xpY2UiLCJyb3ciLCJjZWxscyIsImNlbGwiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvYiIsImlkIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwidG90YWxVcmxzIiwicHJvY2Vzc2VkVXJscyIsImVtYWlsc0ZvdW5kIiwicHJvZ3Jlc3MiLCJjcmVhdGVkQXQiLCJ0b0lTT1N0cmluZyIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/jobs/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/emailExtractor.ts":
/*!*******************************!*\
  !*** ./lib/emailExtractor.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmailExtractor: () => (/* binding */ EmailExtractor),\n/* harmony export */   extractEmails: () => (/* binding */ extractEmails),\n/* harmony export */   extractEmailsFromSpreadsheet: () => (/* binding */ extractEmailsFromSpreadsheet)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/lib/esm/index.js\");\n\n\n// Common email domains to look for\nconst COMMON_EMAIL_DOMAINS = [\n    \"gmail.com\",\n    \"yahoo.com\",\n    \"outlook.com\",\n    \"hotmail.com\",\n    \"aol.com\",\n    \"icloud.com\",\n    \"protonmail.com\",\n    \"mail.com\",\n    \"zoho.com\",\n    \"yandex.com\",\n    \"gmx.com\"\n];\n// Domains to ignore when extracting emails\nconst IGNORE_DOMAINS = [\n    \"wix.com\",\n    \"domain.com\",\n    \"example.com\",\n    \"sentry.io\",\n    \"wixpress.com\",\n    \"squarespace.com\",\n    \"wordpress.com\",\n    \"shopify.com\"\n];\n// Common paths for contact pages\nconst CONTACT_PAGES = [\n    \"/contact\",\n    \"/contact-us\",\n    \"/contact.html\",\n    \"/contact-us.html\",\n    \"/about\",\n    \"/about-us\",\n    \"/about.html\",\n    \"/about-us.html\",\n    \"/get-in-touch\",\n    \"/reach-us\",\n    \"/connect\",\n    \"/reach-out\",\n    \"/our-team\",\n    \"/team\",\n    \"/support\",\n    \"/help\",\n    \"/info\"\n];\n// Function to validate and clean email addresses\nfunction validateEmail(email) {\n    // Clean and validate the email format\n    email = email.trim().toLowerCase();\n    // Ignore image files and other non-email strings containing @ symbol\n    if (/\\.(png|jpg|jpeg|gif|svg|webp|ico)/.test(email)) {\n        return null;\n    }\n    // Remove any invalid start/end characters\n    email = email.replace(/^[^a-zA-Z0-9]+|[^a-zA-Z0-9\\.]+$/g, \"\");\n    // Check if the email follows a valid pattern\n    if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {\n        // Ensure the email doesn't contain file extensions or other non-email patterns\n        const parts = email.split(\"@\");\n        if (parts.length === 2 && parts[1].includes(\".\")) {\n            const domainPart = parts[1];\n            // Check if the domain part looks valid (not an image or file name)\n            if (!/\\d+x\\d+/.test(domainPart)) {\n                return email;\n            }\n        }\n    }\n    return null;\n}\n// Extract domain from URL\nfunction getDomain(url) {\n    try {\n        const urlObj = new URL(url);\n        const hostParts = urlObj.hostname.split(\".\");\n        const domain = hostParts.length >= 2 ? `${hostParts[hostParts.length - 2]}.${hostParts[hostParts.length - 1]}` : urlObj.hostname;\n        return domain;\n    } catch  {\n        return null;\n    }\n}\n// Function to clean and deduplicate emails\nfunction cleanAndDeduplicateEmails(emailsList) {\n    if (!emailsList || emailsList.length === 0) {\n        return [];\n    }\n    // First round of cleaning and deduplication\n    const cleanEmails = new Set();\n    for (const email of emailsList){\n        const validEmail = validateEmail(email);\n        if (validEmail) {\n            // Skip emails from the ignore domains\n            if (!IGNORE_DOMAINS.some((ignoreDomain)=>validEmail.includes(ignoreDomain))) {\n                cleanEmails.add(validEmail);\n            }\n        }\n    }\n    // Handle cases where one email is contained within another or has extra characters\n    // (like \"892-0300info@digitalbytes.tv\" vs \"info@digitalbytes.tv\")\n    const emailsToRemove = new Set();\n    const finalEmails = Array.from(cleanEmails);\n    for(let i = 0; i < finalEmails.length; i++){\n        for(let j = 0; j < finalEmails.length; j++){\n            if (i !== j && finalEmails[i] !== finalEmails[j]) {\n                // Split emails into username and domain parts\n                const email1Parts = finalEmails[i].split(\"@\");\n                const email2Parts = finalEmails[j].split(\"@\");\n                // Check if they have the same domain\n                if (email1Parts.length === 2 && email2Parts.length === 2 && email1Parts[1] === email2Parts[1]) {\n                    const username1 = email1Parts[0];\n                    const username2 = email2Parts[0];\n                    // When one email appears inside another with extra characters (like digits before/after)\n                    if (finalEmails[i].includes(finalEmails[j])) {\n                        // Keep the shorter, cleaner one (contained inside)\n                        emailsToRemove.add(finalEmails[i]);\n                    } else if (finalEmails[j].includes(finalEmails[i])) {\n                        // Keep the shorter, cleaner one (contained inside)\n                        emailsToRemove.add(finalEmails[j]);\n                    } else if (username1.endsWith(username2)) {\n                        // Check if username1 has a prefix pattern like \"something.username2\"\n                        const prefix = username1.substring(0, username1.length - username2.length);\n                        if (prefix.endsWith(\".\") || prefix.endsWith(\"-\") || prefix.endsWith(\"_\")) {\n                            emailsToRemove.add(finalEmails[i]);\n                        }\n                    } else if (username2.endsWith(username1)) {\n                        // Check if username2 has a prefix pattern like \"something.username1\"\n                        const prefix = username2.substring(0, username2.length - username1.length);\n                        if (prefix.endsWith(\".\") || prefix.endsWith(\"-\") || prefix.endsWith(\"_\")) {\n                            emailsToRemove.add(finalEmails[j]);\n                        }\n                    } else if (containsNumbersOrSpecialChars(username1) && !containsNumbersOrSpecialChars(username2)) {\n                        // If username1 has numbers/special chars but username2 doesn't, prefer username2\n                        emailsToRemove.add(finalEmails[i]);\n                    } else if (containsNumbersOrSpecialChars(username2) && !containsNumbersOrSpecialChars(username1)) {\n                        // If username2 has numbers/special chars but username1 doesn't, prefer username1\n                        emailsToRemove.add(finalEmails[j]);\n                    }\n                }\n            }\n        }\n    }\n    // Remove emails flagged for removal\n    const finalCleaned = finalEmails.filter((email)=>!emailsToRemove.has(email));\n    return finalCleaned;\n}\n// Helper function to check if a string contains numbers or special characters\nfunction containsNumbersOrSpecialChars(str) {\n    return /[0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,<>\\/?]+/.test(str);\n}\n// Function to extract emails from a website\nasync function extractEmails(baseUrl) {\n    const emailsSet = new Set();\n    const domain = getDomain(baseUrl);\n    // Process a single URL and extract emails\n    const processUrl = async (url, isContactPage = false)=>{\n        const localEmails = new Set();\n        try {\n            const headers = {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n            };\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(url, {\n                headers,\n                timeout: 15000\n            });\n            const htmlContent = response.data;\n            const $ = cheerio__WEBPACK_IMPORTED_MODULE_0__.load(htmlContent);\n            // Method 1: Extract emails from visible text\n            const textContent = $(\"body\").text();\n            const textEmails = textContent.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g) || [];\n            // Method 2: Extract emails from mailto links\n            const allATags = $(\"a\");\n            const mailtoEmails = [];\n            allATags.each((_, element)=>{\n                // Check href attribute\n                const href = $(element).attr(\"href\") || \"\";\n                if (href.includes(\"mailto:\")) {\n                    const email = href.replace(\"mailto:\", \"\").split(\"?\")[0].trim();\n                    mailtoEmails.push(decodeURIComponent(email));\n                }\n                // Also check other attributes for emails\n                const attrs = $(element).attr();\n                if (attrs) {\n                    Object.keys(attrs).forEach((attrName)=>{\n                        const attrValue = attrs[attrName];\n                        if (typeof attrValue === \"string\" && attrValue.includes(\"@\")) {\n                            const potentialEmails = attrValue.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (potentialEmails) mailtoEmails.push(...potentialEmails);\n                        }\n                    });\n                }\n            });\n            // Method 3: Check for elements with email-related classes or IDs\n            const emailClasses = [\n                \"email\",\n                \"mail\",\n                \"e-mail\",\n                \"contact\",\n                \"email-address\",\n                \"mail-link\",\n                \"mini-contacts\",\n                \"footer-contact\",\n                \"header-contact\",\n                \"contact-info\",\n                \"contact-details\",\n                \"contact-email\",\n                \"footer-email\",\n                \"header-email\",\n                \"info\"\n            ];\n            const classEmails = [];\n            emailClasses.forEach((className)=>{\n                const elements = $(`[class*=${className}]`);\n                elements.each((_, element)=>{\n                    // Extract email from text content\n                    const elementText = $(element).text();\n                    const foundEmails = elementText.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (foundEmails) classEmails.push(...foundEmails);\n                    // Also check attributes\n                    const attrs = $(element).attr();\n                    if (attrs) {\n                        Object.keys(attrs).forEach((attrName)=>{\n                            const attrValue = attrs[attrName];\n                            if (typeof attrValue === \"string\" && attrValue.includes(\"@\")) {\n                                const potentialEmails = attrValue.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                                if (potentialEmails) classEmails.push(...potentialEmails);\n                            }\n                        });\n                    }\n                });\n            });\n            // Method 4: Extract from all tags and attributes (comprehensive scan)\n            const allTagsEmails = [];\n            $(\"*\").each((_, tag)=>{\n                // Check tag content\n                if ($(tag).text().includes(\"@\")) {\n                    const foundEmails = $(tag).text().match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (foundEmails) allTagsEmails.push(...foundEmails);\n                }\n                // Check all attributes\n                const attrs = $(tag).attr();\n                if (attrs) {\n                    Object.keys(attrs).forEach((attrName)=>{\n                        const attrValue = attrs[attrName];\n                        if (typeof attrValue === \"string\" && attrValue.includes(\"@\")) {\n                            const foundEmails = attrValue.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (foundEmails) allTagsEmails.push(...foundEmails);\n                        }\n                    });\n                }\n            });\n            // Method 5: Extract from script tags\n            const scriptEmails = [];\n            const scriptTags = $(\"script\");\n            scriptTags.each((_, script)=>{\n                const scriptContent = $(script).html();\n                if (scriptContent) {\n                    // Look for explicit email field in JSON\n                    const emailPatterns = [\n                        /\"email\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/,\n                        /\"emailAddress\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/,\n                        /\"mail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/,\n                        /\"e-mail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/,\n                        /\"contactEmail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/,\n                        /\"support_email\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/ // \"support_email\": \"example@domain.com\"\n                    ];\n                    emailPatterns.forEach((pattern)=>{\n                        const matches = scriptContent.match(pattern);\n                        if (matches && matches.length > 1) {\n                            scriptEmails.push(matches[1]);\n                        }\n                    });\n                    // Also extract general email pattern\n                    const generalEmails = scriptContent.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (generalEmails) scriptEmails.push(...generalEmails);\n                    // Try to parse JSON data\n                    try {\n                        // Extract any JSON-like structures from the script\n                        const jsonMatches = scriptContent.match(/\\{[^{}]*\\}/g);\n                        if (jsonMatches) {\n                            jsonMatches.forEach((jsonStr)=>{\n                                try {\n                                    const data = JSON.parse(jsonStr);\n                                    // Recursively search for email keys in the JSON\n                                    const extractJsonEmails = (obj)=>{\n                                        const found = [];\n                                        if (typeof obj === \"object\" && obj !== null) {\n                                            if (Array.isArray(obj)) {\n                                                obj.forEach((item)=>{\n                                                    found.push(...extractJsonEmails(item));\n                                                });\n                                            } else {\n                                                for(const key in obj){\n                                                    if (typeof obj[key] === \"string\" && (key.toLowerCase().includes(\"email\") || key.toLowerCase().includes(\"mail\") || key.toLowerCase().includes(\"contact\"))) {\n                                                        const value = obj[key];\n                                                        if (value.includes(\"@\") && value.includes(\".\")) {\n                                                            found.push(value);\n                                                        }\n                                                    } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n                                                        found.push(...extractJsonEmails(obj[key]));\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        return found;\n                                    };\n                                    const jsonEmails = extractJsonEmails(data);\n                                    scriptEmails.push(...jsonEmails);\n                                } catch  {\n                                // Ignore JSON parse errors\n                                }\n                            });\n                        }\n                    } catch  {\n                    // Ignore JSON extraction errors\n                    }\n                }\n            });\n            // Method 6: Extract from meta tags\n            const metaEmails = [];\n            const metaTags = $(\"meta\");\n            metaTags.each((_, meta)=>{\n                const content = $(meta).attr(\"content\") || \"\";\n                if (content.includes(\"@\")) {\n                    const foundEmails = content.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (foundEmails) metaEmails.push(...foundEmails);\n                }\n            });\n            // Method 7: Look specifically for common email domains in the entire HTML content\n            const domainBasedEmails = [];\n            COMMON_EMAIL_DOMAINS.forEach((emailDomain)=>{\n                // Find all text containing common email domains\n                const domainPattern = new RegExp(`[a-zA-Z0-9._%+-]+@${emailDomain.replace(\".\", \"\\\\.\")}`, \"g\");\n                const foundDomainEmails = htmlContent.match(domainPattern);\n                if (foundDomainEmails) domainBasedEmails.push(...foundDomainEmails);\n            });\n            // Method 8: Look for obfuscated emails (especially on contact pages)\n            if (isContactPage) {\n                // Look for JavaScript email obfuscation\n                scriptTags.each((_, script)=>{\n                    const scriptContent = $(script).html() || \"\";\n                    if (scriptContent.toLowerCase().includes(\"email\") || scriptContent.toLowerCase().includes(\"mail\") || scriptContent.toLowerCase().includes(\"contact\")) {\n                        // Check for string concatenation\n                        const concatPatterns = [\n                            /['\"]\\s*\\+\\s*['\"]/,\n                            /\\.join\\(/,\n                            /\\.reverse\\(/,\n                            /String\\.fromCharCode/ // Character code conversion\n                        ];\n                        const hasObfuscation = concatPatterns.some((pattern)=>pattern.test(scriptContent));\n                        if (hasObfuscation) {\n                            // Extract anything that looks like it could be part of email when concatenated\n                            const parts = scriptContent.match(/['\"]([a-zA-Z0-9._%+-@]+)['\"]/g);\n                            if (parts && parts.join(\"\").includes(\"@\")) {\n                                // Try simple reconstruction for common patterns\n                                const reconstructed = parts.join(\"\").replace(/['\"]/g, \"\");\n                                const potentialEmails = reconstructed.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                                if (potentialEmails) domainBasedEmails.push(...potentialEmails);\n                            }\n                        }\n                    }\n                });\n                // Look for emails in contact form HTML structure\n                const contactForms = $(\"form\");\n                contactForms.each((_, form)=>{\n                    // Check for hidden email fields\n                    const hiddenFields = $('input[type=\"hidden\"]', form);\n                    hiddenFields.each((_, field)=>{\n                        const value = $(field).attr(\"value\") || \"\";\n                        if (value.includes(\"@\")) {\n                            const foundEmails = value.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (foundEmails) domainBasedEmails.push(...foundEmails);\n                        }\n                    });\n                });\n            }\n            // Combine all emails\n            const allExtractedEmails = [\n                ...textEmails,\n                ...mailtoEmails,\n                ...classEmails,\n                ...allTagsEmails,\n                ...scriptEmails,\n                ...metaEmails,\n                ...domainBasedEmails\n            ];\n            // Clean and add valid emails to the local set\n            allExtractedEmails.forEach((email)=>{\n                const validEmail = validateEmail(email);\n                if (validEmail && !IGNORE_DOMAINS.some((ignoreDomain)=>validEmail.includes(ignoreDomain))) {\n                    localEmails.add(validEmail);\n                }\n            });\n        } catch (error) {\n            console.error(`Error processing URL ${url}:`, error);\n        }\n        return localEmails;\n    };\n    // First process the main URL\n    const mainPageEmails = await processUrl(baseUrl);\n    mainPageEmails.forEach((email)=>emailsSet.add(email));\n    // Then process contact pages regardless of how many emails we found\n    // (to ensure we get the most accurate contact emails)\n    for (const contactPath of CONTACT_PAGES){\n        const contactUrl = new URL(contactPath, baseUrl).toString();\n        if (contactUrl !== baseUrl) {\n            try {\n                const contactPageEmails = await processUrl(contactUrl, true);\n                contactPageEmails.forEach((email)=>emailsSet.add(email));\n            } catch  {\n                continue;\n            }\n        }\n    }\n    // Clean and deduplicate emails\n    const allEmails = cleanAndDeduplicateEmails(Array.from(emailsSet));\n    // Prioritize emails with domain matching the website\n    const domainEmails = allEmails.filter((email)=>domain && email.includes(domain));\n    const otherEmails = allEmails.filter((email)=>!domainEmails.includes(email));\n    // Sort emails with domain emails first\n    const sortedEmails = [\n        ...domainEmails.sort(),\n        ...otherEmails.sort()\n    ];\n    return sortedEmails;\n}\nclass EmailExtractor {\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n    }\n    async extractEmails() {\n        try {\n            return await extractEmails(this.baseUrl);\n        } catch (error) {\n            console.error(\"Error extracting emails:\", error);\n            return [];\n        }\n    }\n}\nasync function extractEmailsFromSpreadsheet(spreadsheetUrl, urlColumn) {\n    try {\n        // Convert Google Sheets URL to CSV export URL\n        const csvUrl = spreadsheetUrl.replace(/\\/edit.*$/, \"/export?format=csv\");\n        // Fetch the CSV content\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(csvUrl);\n        const csvContent = response.data;\n        // Parse CSV content\n        const rows = csvContent.split(\"\\n\").map((row)=>row.split(\",\").map((cell)=>cell.trim()));\n        const headers = rows[0];\n        const urlColumnIndex = headers.indexOf(urlColumn);\n        if (urlColumnIndex === -1) {\n            throw new Error(`Column \"${urlColumn}\" not found in spreadsheet`);\n        }\n        const results = [];\n        // Process each row (skip header row)\n        for(let i = 1; i < rows.length; i++){\n            const row = rows[i];\n            if (row.length <= urlColumnIndex) continue;\n            const url = row[urlColumnIndex].replace(/^\"|\"$/g, \"\"); // Remove quotes if present\n            if (!url) continue;\n            try {\n                // Make sure URL has proper protocol\n                const properUrl = url.startsWith(\"http\") ? url : `https://${url}`;\n                const emails = await extractEmails(properUrl);\n                results.push({\n                    url: properUrl,\n                    emails\n                });\n            } catch (error) {\n                console.error(`Error processing ${url}:`, error);\n                results.push({\n                    url,\n                    emails: []\n                });\n            }\n        }\n        return results;\n    } catch (error) {\n        console.error(\"Error processing spreadsheet:\", error);\n        throw new Error(\"Failed to process spreadsheet\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/emailExtractor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/get-intrinsic","vendor-chunks/form-data","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/es-define-property","vendor-chunks/gopd","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/parse5","vendor-chunks/cheerio","vendor-chunks/css-select","vendor-chunks/entities","vendor-chunks/domutils","vendor-chunks/nth-check","vendor-chunks/htmlparser2","vendor-chunks/cheerio-select","vendor-chunks/domhandler","vendor-chunks/dom-serializer","vendor-chunks/css-what","vendor-chunks/parse5-htmlparser2-tree-adapter","vendor-chunks/domelementtype","vendor-chunks/boolbase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&page=%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2F%5Bid%5D%2Fprocess%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs5%2Femail-extractor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();